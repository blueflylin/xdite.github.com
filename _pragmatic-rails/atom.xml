<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>GitHub Rebase</title>
 <link href="http://railsxd.github.com/atom.xml" rel="self"/>
 <link href="http://railsxd.github.com/"/>
 <updated>2011-05-08T09:02:56+08:00</updated>
 <id>http://railsxd.github.com/</id>
 <author>
   <name>xdite</name>
   <email>xuite.joke@gmail.com</email>
 </author>
 
 
 <entry>
   <title>Best Practice of Installing Ruby on Rails on clean Mac</title>
   <link href="http://railsxd.github.com/install-rails-on-mac.html"/>
   <updated>2011-02-11T00:00:00+08:00</updated>
   <id>http://railsxd.github.com/install-rails-on-mac</id>
   <content type="html">&lt;h2 id='mac_'&gt;Mac 裝機步驟&lt;/h2&gt;
&lt;div class='warning'&gt;
警告: 請絕對不要跳著裝！
&lt;/div&gt;
&lt;h3 id='id54'&gt;系統套件&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Software Update&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Install Xcode ( &lt;strong&gt;Mac OS X Install CD 那一塊的&lt;/strong&gt;&amp;#160;&amp;#187; &lt;strong&gt;選擇安裝&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Install &lt;a href='http://github.com/mxcl/homebrew'&gt;Homebrew&lt;/a&gt; &lt;pre&gt;ruby -e &quot;$(curl -fsS https://gist.github.com/raw/323731/install_homebrew.rb)&quot;&lt;/pre&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; brew install git&lt;/li&gt;

&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; brew update&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='imagemagick__mysql__sphinx'&gt;Imagemagick / MYSQL / Sphinx&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝 Imagemagick&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; brew install imagemagick&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;安裝 MySQL&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; brew install mysql&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;請注意以下指令 MySQL 版號，請自行更正&lt;/strong&gt; &lt;pre&gt;
 unset TMPDIR
 mysql_install_db
 cp /usr/local/Cellar/mysql/5.1.54/com.mysql.mysqld.plist ~/Library/LaunchAgents
 launchctl load -w ~/Library/LaunchAgents/com.mysql.mysqld.plist
 /usr/local/Cellar/mysql/5.1.54/bin/mysql_secure_installation
 &lt;/pre&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set root password? &lt;code&gt;[&lt;/code&gt;Y/n&lt;code&gt;]&lt;/code&gt; &lt;strong&gt;Y&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;New password: &lt;strong&gt;123456&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;Re-enter new password: &lt;strong&gt;123456&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;Remove anonymous users? &lt;code&gt;[&lt;/code&gt;Y/n&lt;code&gt;]&lt;/code&gt; &lt;strong&gt;Y&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;Disallow root login remotely? &lt;code&gt;[&lt;/code&gt;Y/n&lt;code&gt;]&lt;/code&gt; &lt;strong&gt;Y&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;Remove test database and access to it? &lt;code&gt;[&lt;/code&gt;Y/n&lt;code&gt;]&lt;/code&gt; &lt;strong&gt;Y&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;Reload privilege tables now? &lt;code&gt;[&lt;/code&gt;Y/n&lt;code&gt;]&lt;/code&gt; &lt;strong&gt;Y&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;安裝 Sphinx&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; brew install sphinx&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='_rvm__ree'&gt;安裝 RVM 與 REE&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝 RVM &lt;pre&gt;
 bash &amp;lt;&amp;lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head )
 echo &amp;quot;[[ -s $HOME/.rvm/scripts/rvm ]] &amp;amp;&amp;amp; 
 source $HOME/.rvm/scripts/rvm&amp;quot; &amp;gt;&amp;gt; ~/.profile &amp;amp;&amp;amp; . ~/.profile
 source ~/.profile
 &lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; rvm install ree&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; rvm ree &amp;#8211;default&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解決使用 rvm 裝 ree 後，不能在 irb 打中文的問題&lt;/strong&gt; &lt;pre&gt;
   brew install readline
   brew link readline
   rvm --reconfigure --force -C --with-readline-dir=/usr/local install ree
 &lt;/pre&gt;&lt;/p&gt;
&lt;div class='info'&gt;
     &lt;p&gt;
          使用 RVM 安裝 gem 和 passenger-install-apache2-module 不需要加上 sudo , 因為使用 sudo 會使用非 RVM 的 ruby 環境, 安裝目錄也不一樣.)
     &lt;/p&gt;
 &lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='_ruby_gems'&gt;安裝必要 Ruby gems&lt;/h3&gt;
&lt;pre&gt;
gem install rails
gem install rails -v=2.3.8
gem install mysql2
gem install mysql
gem install passenger
gem install nokogiri
gem install capistrano
gem install capistrano-ext
gem install delayed_job
gem install hoptoad_notifier
gem install facebooker2
gem install factory_girl
gem install sphinx
&lt;/pre&gt;
&lt;h3 id='_http_server'&gt;設定 HTTP Server&lt;/h3&gt;

&lt;p&gt;請使用 &lt;a href='/todo.html'&gt;Pow&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='todo'&gt;TODO&lt;/h4&gt;</content>
 </entry>
 
 <entry>
   <title>深入淺出 RoR (4-3) - RESTful 與 CRUD action</title>
   <link href="http://railsxd.github.com/ror-4-3.html"/>
   <updated>2010-11-01T00:00:00+08:00</updated>
   <id>http://railsxd.github.com/ror-4-3</id>
   <content type="html">&lt;p&gt;Rails 1.2 引進了 REST 觀念。而在 Rails 2.0 ，RESTful 更成為這個版本的主要重點之一。&lt;/p&gt;

&lt;p&gt;如果你對 &lt;a href='http://devpoga.wordpress.com/2008/02/17/restful-rails-%E7%B0%A1%E5%96%AE%E5%BF%83%E5%BE%97/'&gt;RESTful Rails&lt;/a&gt; 不甚了解，推薦 RESTful Rails 簡單心得 這篇文章當入門磚。而希望深入了解的可以閱讀 ihower 的 &lt;a href='http://ihower.idv.tw/blog/archives/1542'&gt;什麼是 REST跟RESTful?&lt;/a&gt; 。不過我傾向建議你看完這篇文章再去啃這兩篇。&lt;/p&gt;
&lt;pre&gt;
    ActionController::Routing::Routes.draw do |map|
        map.resources :blogs
    end
&lt;/pre&gt;
&lt;p&gt;在 config/routes.rb 加入上面那一行，就是具體在 rails 實作 RESTful 支援的方式。&lt;/p&gt;

&lt;p&gt;這樣的宣告將在自動對應 URL路徑跟 Controller 的 action ，而有以下的結果 :&lt;/p&gt;
&lt;pre&gt;
    GET: /blogs =&gt; [:action =&gt; 'index']
    GET: /blogs.xml =&gt; [:action =&gt; 'index', :format =&gt; 'xml']
    GET: /blogs/1 =&gt; [:action =&gt; 'show', :id =&gt; 1]
    GET: /blogs/1/edit =&gt; [:action =&gt; 'edit', :id =&gt; 1]
    GET: /blogs/1.xml =&gt; [:action =&gt; 'show', :id =&gt; 1, :format =&gt; 'xml']
    POST: /blogs =&gt; [:action =&gt; 'create']
    PUT: /blogs/1 =&gt; [:action =&gt; 'update', :id =&gt; 1]
    DELETE: /blogs/1 =&gt; [:action =&gt; 'destroy', :id =&gt; 1]
&lt;/pre&gt;
&lt;p&gt;也就是使用 named routes 來實作出 verb-oriented controllers，單一個 resource 根據 HTTP verb 而有不同的行為。&lt;/p&gt;

&lt;p&gt;除了產生對應 routes 的 action 給 Controller，最方便的是自動產生了一些 helpers 給 views。&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;helpers&lt;/th&gt;&lt;th&gt;HTTP Verb&lt;/th&gt;&lt;th&gt;產生的Path&lt;/th&gt;&lt;th&gt;對應的Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blogs_path&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/blogs&lt;/td&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blog_path(id)&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/blogs/1&lt;/td&gt;
&lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;new_blog_path&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/blogs/new&lt;/td&gt;
&lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blogs_path&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/blogs&lt;/td&gt;
&lt;td&gt;create&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;edit_blog_path(id)&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/blogs/1/edit&lt;/td&gt;
&lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bloh_path(id)&lt;/td&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/blogs/1&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;update&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blog_path(id)&lt;/td&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/blogs/1&lt;/td&gt;
&lt;td&gt;destroy&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;相信這一些解說能大致讓你對 blogs_controller 或 view 裡的一些 path 有一些粗淺的了解。&lt;/p&gt;

&lt;p&gt;verb-oriented 有什麼好處呢？最明顯的好處就是在 Rails 1.1 中需要花上很多功夫刻的 action code，在 Rails 2.x 中大部分都可以藉由 htttp verb 作掉。&lt;/p&gt;

&lt;p&gt;本篇文章接下來對 controller 的 action 作一點簡單的解說。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index&lt;/strong&gt; 是拉列表的動作。因此 Post.all 是拉出 Post 這個 model 所有的資料。 &lt;pre&gt;
    def index
      @posts = Post.find(:all)
    end
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;show&lt;/strong&gt; 秀出單筆資料。 Post.find(123) 是指找 Post model 裡 id 為 123 的資料。http://demosite.com/blogs/show/123 的 blogs 是 controller、show 是 action；如果在 route 裡面沒有特別指定，則 123 通常就是 params&lt;code&gt;[&lt;/code&gt;:id&lt;code&gt;]&lt;/code&gt; 。 &lt;pre&gt;
    def show
      @post = Post.find(params`[`:id`]`)
    end
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;new&lt;/strong&gt; 應該不必多說，就是 initial 一個 Post 的新 object。 def new @post = Post.new end&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt; 這邊跟 show 相同的作法，是拉出 Post model 裡指定的 object ，只是資料拉出來，編輯。 &lt;pre&gt;
    def edit
      @post = Post.find(params`[`:id`]`)
    end
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;create&lt;/strong&gt; 這邊我們要翻回 app/views/blogs/new.html.erb 這個 view 並列一起來看。 &lt;pre&gt;
    def create
      @post = Post.new(params`[`:post`]`)
      if @post.save
        flash[:notice] = 'Post was successfully created.'
        redirect_to blog_path(@post)
      else
        render :action =&gt; &quot;new&quot;
      end
    end
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;New post&amp;lt;/h1&amp;gt;

&amp;lt;% form_for :post , :url =&amp;gt; blogs_path do |f| -%&amp;gt;
    &amp;lt;%= f.error_messages %&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;label&amp;gt;subject&amp;lt;/label&amp;gt;&amp;lt;%= f.text_field :subject %&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;label&amp;gt;content&amp;lt;/label&amp;gt;&amp;lt;%= f.text_area :content %&amp;gt; &amp;lt;/div&amp;gt;
    &amp;lt;%= f.submit &amp;quot;Submit&amp;quot;, :disable_with =&amp;gt; &amp;#39;Submiting...&amp;#39; %&amp;gt;
&amp;lt;% end -%&amp;gt;


&amp;lt;%= link_to &amp;#39;Back&amp;#39;, blogs_path %&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 RESTful Rails 的寫法中，對 blogs_path （就是 index action ）丟 POST 就是對應到 create 的動作。而 Rails 在設計上，form 是綁 model 的，因此整個 form 的內容會被包成一個 hash，在這裡就是 params&lt;code&gt;[&lt;/code&gt;:post&lt;code&gt;]&lt;/code&gt;。create action 初始一個 object ，並把 params&lt;code&gt;[&lt;/code&gt;:post&lt;code&gt;]&lt;/code&gt; 整包塞進這個 object 裡。如果 @post 能夠成功的儲存，就「重導」到 index action ，失敗則「退回」到 new action 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt; 這邊我們也要翻回 app/views/blogs/edit.html.erb 這個 view 一起來看。&lt;/p&gt;
&lt;pre&gt;
    def update
      @post = Post.find(params`[`:id`]`)
      if @post.update_attributes(params`[`:post`]`)
       flash[:notice] = 'Post was successfully updated.'
       redirect_to blog_path(@post)
      else
        format.html { render :action =&gt; &quot;edit&quot; }
      end
    end
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Editing post&amp;lt;/h1&amp;gt;
&amp;lt;% form_for :post , :url =&amp;gt; blog_path(@post) , :html =&amp;gt; {:method =&amp;gt; :put} do |f| -%&amp;gt;
    &amp;lt;%= f.error_messages %&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;%= f.text_field :subject %&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;%= f.text_area :content %&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;%= f.submit &amp;quot;Submit&amp;quot;, :disable_with =&amp;gt; &amp;#39;Submiting...&amp;#39; %&amp;gt;
&amp;lt;% end -%&amp;gt;

&amp;lt;%= link_to &amp;#39;Show&amp;#39;, blog_path(blog) %&amp;gt; |
&amp;lt;%= link_to &amp;#39;Back&amp;#39;, blogss_path %&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 RESTful Rails 的寫法中，對 blog_path （就是 show action ）丟 PUT 就是對應到 update 的動作。form 會背包成一個 hash，如果 @post 能夠吃進 params&lt;code&gt;[&lt;/code&gt;:post&lt;code&gt;]&lt;/code&gt; 進行更新且成功儲存，就會「重導」到 show action，失敗則「退回」到 edit action。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;delete&lt;/strong&gt; 找到該筆資料並刪除之。在 RESTful Rails 的寫法中，對 blog_path(就是 show action) 丟 DELETE 對應到 destroy 的動作。可看一下 link_to &amp;#8220;Destroy&amp;#8221; 那一行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;My Blog&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;&amp;lt;%= link_to &amp;#39;New post&amp;#39;, new_blog_path %&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;table&amp;gt;
  &amp;lt;tr&amp;gt;
  &amp;lt;/tr&amp;gt;

&amp;lt;% for post in @posts %&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;%= post.subject %&amp;gt; &amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;%= link_to &amp;#39;Show&amp;#39;, blog_path(post) %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;%= link_to &amp;#39;Edit&amp;#39;, edit_blog_path(post) %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;%= link_to &amp;#39;Destroy&amp;#39;,  blog_path(post), :confirm =&amp;gt; &amp;#39;Are you sure?&amp;#39;, :method =&amp;gt; :delete %&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;/table&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;看到這個段落，我想應該能讓你對 RESTful Rails 以及 CRUD 中的各種互動有一點粗淺的瞭解。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby on Rails 書單 與 練習作業</title>
   <link href="http://railsxd.github.com/learning-rails.html"/>
   <updated>2010-03-14T00:00:00+08:00</updated>
   <id>http://railsxd.github.com/learning-rails</id>
   <content type="html">&lt;h2 id='id49'&gt;新人需要具備的「一般」基礎技能&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;對 &lt;a href='http://git-scm.com/'&gt;Git&lt;/a&gt; 的觀念與技巧掌握。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;對 VIM / Textmate 的基本開發技巧掌握。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;書單&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;c9s 的 &lt;a href='http://c9s.blogspot.com/2009/08/vim-hacks-coscup.html'&gt;VIM Hacks&lt;/a&gt; 與 Oreilly 的 &lt;a href='http://tlsj.tenlong.com.tw/WebModule/BookSearch/bookSearchViewAction.do?isbn=9789866840326&amp;amp;sid=48676&amp;amp;aid=69e42ffb'&gt;精通 vi 與 vim&lt;/a&gt; 與 Pragmatic 的 &lt;a href='http://www.pragprog.com/titles/textmate/textmate'&gt;TextMate: Power Editing for the Mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;練習&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;vgod 的 &lt;a href='http://blog.vgod.tw/2009/12/08/vim-cheat-sheet-for-programmers/'&gt;給程式設計師的Vim入門圖解說明&lt;/a&gt; 全部練習一遍&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;熟悉 Linux Command Line 的操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;書單與練習&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Peepcode 的 &lt;a href='http://peepcode.com/products/meet-the-command-line'&gt;Meet the Command Line&lt;/a&gt; 、&lt;a href='http://peepcode.com/products/advanced-command-line'&gt;Advanced Command Line&lt;/a&gt; 全部練過一遍&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Git&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;書單&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Peepcode 的 &lt;a href='http://peepcode.com/products/git'&gt;Git&lt;/a&gt; 與 &lt;a href='http://progit.org/book/'&gt;Pro Git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;練習&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上 &lt;a href='http://github.com'&gt;Github&lt;/a&gt; 開啟一個專案，練習 git commit , git push , git pull, git branch , git checkout , git merge&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='_rails_'&gt;新人需要具備的 Rails 基礎技能&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;可手刻 CRUD ( Create / Read / Update / Delete ) 並且理解 CRUD 中的 params 傳遞方法&lt;/li&gt;

&lt;li&gt;route 中 resources 觀念配合 model 裡 has_many 的設計，理解並熟悉 RESTful 觀念。&lt;/li&gt;

&lt;li&gt;route 的優先順序與 routes 中 resource / namespace 的實作。&lt;/li&gt;

&lt;li&gt;scope 、 counter_cache、before_filter&lt;/li&gt;

&lt;li&gt;plugin 的使用： &lt;a href='https://github.com/plataformatec/devise'&gt;devise&lt;/a&gt; 、&lt;a href='http://wiki.github.com/mislav/will_paginate'&gt;will_paginate&lt;/a&gt;、&lt;a href='http://github.com/thoughtbot/paperclip'&gt;paperclip&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;rake 原理以及撰寫 task&lt;/li&gt;

&lt;li&gt;ruby on rails 的 production setup 與撰寫 &lt;a href='http://www.capify.org/'&gt;capistrano&lt;/a&gt; recipes&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='id50'&gt;書單：（案頭必備）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.books.com.tw/exep/prod/booksfile.php?item=0010350699'&gt;Ruby Programming — 向 Ruby 之父學程式設計&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.books.com.tw/exep/prod/booksfile.php?item=0010400655'&gt;Ruby for Rails – Rails 開發者必備的 Ruby 學習手冊&lt;/a&gt;（英文新版： &lt;a href='http://www.manning.com/black2/'&gt;The Well-Grounded Rubyist&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://oreilly.com/catalog/9780596514815'&gt;Ruby Pocket Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.books.com.tw/exep/prod/booksfile.php?item=0010374225'&gt;碼上就會：Rails敏捷開發網站&lt;/a&gt; &lt;em&gt;(may not suit for Rails3)&lt;/em&gt; （英文新版: &lt;a href='http://pragprog.com/titles/rails4/agile-web-development-with-railsn'&gt;Agile Web Development with Rails (4th edition)&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://tr3w.com/'&gt;The Rails 3 Way&lt;/a&gt; &lt;em&gt;(only for Rails3)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://my.safaribooksonline.com/9780321445612'&gt;The Rails Way&lt;/a&gt; &lt;em&gt;(may not suit for Rails3)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.pragprog.com/titles/fr_rr/rails-recipes'&gt;Rails Recipes&lt;/a&gt; &lt;em&gt;(may not suit for Rails3)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.pragprog.com/titles/fr_arr/advanced-rails-recipes'&gt;Advanced Rails Recipes: 84 New Ways to Build Stunning Rails Apps&lt;/a&gt; &lt;em&gt;(may not suit for Rails3)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id51'&gt;書單：（入門用）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://ruby.railstutorial.org/'&gt;Ruby on Rails Tutorial: Learn Rails by Example&lt;/a&gt; &lt;em&gt;(only for Rails3)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id52'&gt;線上工具：（必加書籤）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://railscasts.com/'&gt;Rails Cast&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Ruby API : &lt;a href='http://www.ruby-doc.org/core/classes/String.html'&gt;String&lt;/a&gt;、&lt;a href='http://www.ruby-doc.org/core/classes/Array.html'&gt;Array&lt;/a&gt;、&lt;a href='http://www.ruby-doc.org/core/classes/Hash.html'&gt;Hash&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;APIDock : &lt;a href='http://apidock.com/rails'&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id53'&gt;練習作業&lt;/h3&gt;

&lt;p&gt;1. 開發一個簡易論壇系統。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系統要有 Forum 與 Post 兩個 model，寫出 CRUD 介面，並且文章網址是使用 http://example.org/forum/1/post/2 這種表示。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;CRUD &amp;amp; migration&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;has_many 與 belongs_to&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;resources 與雙層 resources&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;before_filter : find_event&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;參考資料&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://rails.pixnet.net/blog/post/22956704'&gt;深入淺出 RoR (4-3) – RESTful 與 CRUD action&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://ihower.tw/training/rails-tutoral.html'&gt;ihower training : Ruby on Rails 入門&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2. 使用者必須能夠 註冊 / 登入，登入後才可以發表 Post，不然只能瀏覽。只有自己的 Post 才能進行修改與刪除。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;routes 優先權與 route alias&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;plugin 安裝與使用&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;before_filter : login_required&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;session : current_user&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M002281'&gt;attr_accessible&lt;/a&gt; / &lt;a href='http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M002280'&gt;attr_protected&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;參考資料&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='https://github.com/plataformatec/devise'&gt;devise&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3. 論壇的文章要能夠分頁，每一頁 20 筆，每一個論壇要秀出現在論壇裡有多少 post 數量。可用 params 配合 named_scope 在文章列表排序。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pagination&lt;/li&gt;

&lt;li&gt;counter_cache&lt;/li&gt;

&lt;li&gt;scope :recent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;參考資料&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://wiki.github.com/mislav/will_paginate'&gt;will_paginate&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://railscasts.com/episodes/23-counter-cache-column'&gt;Railscast : Counter Cache Column&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://railscasts.com/episodes/108-named-scope'&gt;Railscast : named_scope&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4. 每篇文章可以上傳附件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;form_for multipart&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;參考資料&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://github.com/thoughtbot/paperclip'&gt;paperclip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5. Admin 可以刪改所有文章，建立一個後台做這件事。網址是 http://example.org/admin/。只有身分是 admin 的人可以進後台。admin 的判別方是 column 裡加一個 boolean，判斷是否 admin。這個 attribute 必須用 attr_accessible / attr_protected 保護。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;route : namespace&lt;/li&gt;

&lt;li&gt;before_filter : require_is_admin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;參考資料&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://railstips.org/blog/archives/2007/04/28/namespaces-added-to-routes/'&gt;Namespaces added to routes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6. 用 Rake 撰寫自動化步驟，生假資料。寫一個 rake 可以達成以下步驟：「砍 db =&amp;gt; 建 db =&amp;gt; 跑 migration =&amp;gt; 生種子資料」，另一個 rake 是生假文章與假論壇。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rake -T&lt;/li&gt;

&lt;li&gt;rake db:drop ; rake db:create ; rake db:migrate ; rake db:seed&lt;/li&gt;

&lt;li&gt;rake dev:fake ( 自己寫 namespace : dev, 裡面放一個 task 叫做 fake，fake 資料用 &lt;a href='http://github.com/ryanb/populator'&gt;Populator&lt;/a&gt; 生）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;參考資料&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://railsenvy.com/2007/6/11/ruby-on-rails-rake-tutorial'&gt;Ruby on Rails Rake Tutorial (aka. How rake turned me into an alcoholic)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://ryandaigle.com/articles/2009/5/13/what-s-new-in-edge-rails-database-seeding'&gt;What’s New in Edge Rails: Database Seeding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7. 在租來的 VPS 上面建置 Ruby on Rails production 環境，使用 Ruby Enterprise 與 mod_rails。使用 capistrano 佈署 application。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cap deploy:setup&lt;/li&gt;

&lt;li&gt;cap deploy&lt;/li&gt;

&lt;li&gt;cap deploy:rollback&lt;/li&gt;

&lt;li&gt;cap deploy:restart&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;參考資料&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://github.com/jnstq/rails-nginx-passenger-ubuntu'&gt;rails-nginx-passenger-ubuntu&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;AWDR3 的 deploy 章節 , Ruby Pocket Reference 的 &lt;a href='http://www.capify.org/'&gt;capistrano&lt;/a&gt; 章節&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;PS. 實際測試的結果是，完全不懂 Ruby on Rails 的新人，從頭帶過大概兩週可以練完這一份作業。&lt;/p&gt;</content>
 </entry>
 
 
</feed>
 